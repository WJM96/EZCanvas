class EZCanvas{constructor(settings={},canvasElement="#ezcanvas"){"string"==typeof canvasElement&&("#"!==canvasElement[0]&&(canvasElement="#"+canvasElement),canvasElement=document.querySelector(canvasElement));try{this.canvasElement=canvasElement,this.ctx=canvasElement.getContext("2d")}catch(error){console.log(`EZCanvas couldn't find the specified element, or it was not a canvas. ERR: ${error}`)}this.settings={brush:{ends:"round",size:5,color:"#000000"},stabilizer:{enabled:!0,delay:.3},clearColor:"#FFFFFF"};for(const key in this.settings)settings.hasOwnProperty(key)&&("object"==typeof this.settings[key]?Object.assign(this.settings[key],settings[key]):this.settings[key]=settings[key]);this.applySettings(),this.currentPos=[0,0],this.lastPos=[0,0],this.canvasElement.onpointermove=this.handlePointerMove.bind(this),this.canvasElement.onpointerdown=this.startLine.bind(this),this.canvasElement.onpointerup=this.endLine.bind(this),this.canvasElement.onpointerleave=this.endLine.bind(this),this.running=!1}applySettings(){return this.ctx.lineWidth=this.settings.brush.size,this.ctx.lineCap=this.settings.brush.ends,this.ctx.strokeStyle=this.settings.brush.color,this}setBrushColor(color="#000000"){return this.settings.brush.color=color,this.ctx.strokeStyle=color,this}setBrushSize(size=5){return this.settings.brush.size=size,this.ctx.lineWidth=size,this}clear(color="transparent"){return"transparent"===color?this.ctx.clearRect(0,0,this.canvasElement.width,this.canvasElement.height):(this.ctx.save(),this.ctx.fillStyle=color||this.settings.clearColor,this.ctx.fillRect(0,0,this.canvasElement.width,this.canvasElement.height),this.ctx.restore()),this}drawImage(url,fill=!1){const img=document.createElement("IMG");return img.onload=(()=>{let dest=[0,0,img.width,img.height];fill&&(dest=[0,0,this.canvasElement.width,this.canvasElement.height]),this.ctx.drawImage(img,...dest)}),img.src=url,this}updatePointerPos(event){const offset=this.canvasElement.getBoundingClientRect(),xZoom=this.canvasElement.width/this.canvasElement.clientWidth,yZoom=this.canvasElement.height/this.canvasElement.offsetHeight;this.settings.stabilizer.enabled||(this.lastPos=this.currentPos),this.currentPos=[(event.clientX-offset.left)*xZoom,(event.clientY-offset.top)*yZoom]}handlePointerMove(event){this.updatePointerPos(event),this.running&&this.draw()}startLine(){this.running=!0,this.lastPos=this.currentPos,this.contextPos=this.currentPos,this.ctx.moveTo(...this.currentPos)}endLine(){this.running=!1}draw(){this.ctx.beginPath(),this.ctx.moveTo(...this.lastPos);let dest=this.currentPos;if(this.settings.stabilizer.enabled){const diff=[this.currentPos[0]-this.lastPos[0],this.currentPos[1]-this.lastPos[1]];dest=[this.lastPos[0]+diff[0]*this.settings.stabilizer.delay,this.lastPos[1]+diff[1]*this.settings.stabilizer.delay],this.lastPos=dest}this.ctx.lineTo(...dest),this.ctx.stroke()}resizeCanvas(preserve=!0){let img;return preserve&&(img=this.canvasElement.toDataURL()),this.canvasElement.height=this.canvasElement.offsetHeight,this.canvasElement.width=this.canvasElement.offsetWidth,preserve&&this.drawImage(img),this.applySettings(),this}}